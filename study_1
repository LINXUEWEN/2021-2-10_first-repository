#include <stdio.h>
#include <string.h>//strlen()函数
#include <windows.h>//Sleep()函数
#include <stdlib.h>//system()函数
#include <time.h>

#define ROW 7
#define COL 7

void game();
void InitBoard(char board[ROW][COL], int row, int col);
void DisplayBoard(char board[ROW][COL], int row, int col);
void player_move(char board[ROW][COL], int row, int col);
void cp_move(char board[ROW][COL], int row, int col);
char is_win(char board[ROW][COL], int row, int col);
int is_full(char board[ROW][COL], int row, int col);

//测试三子棋游戏
void menu()
{
	printf("*****************************\n");
	printf("****  1. play   0.exit  *****\n");
	printf("*****************************\n");
}

void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请输入:> ");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			printf("开始游戏\n");
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("输入错误，请重新输入\n");
			break;
		}
	} while (input);
}

int main()
{
	test();
	return 0;
}

void InitBoard(char board[ROW][COL], int row, int col)
{
	int i, j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}

void DisplayBoard(char board[ROW][COL], int row, int col)
{
	int i, j = 0;
	printf(" ");
	for (j = 0; j < col; j++)
	{
		printf("  %d ",j+1);
	}
	printf("\n ");
	for (j = 0; j < col; j++)//打印上界线
	{
		printf("____");
	}
	printf("_\n");
	for (i = 0; i < row; i++)//打印格子
	{
		printf("%d", i+1);
		for (j = 0; j < col; j++)
		{
			printf("| %c ", board[i][j]);
		}
		printf("|\n ");
		if (i < row - 1)//打印分割线
		{
			for (j = 0; j < col; j++)
			{
				printf("|---");
			}
			printf("|\n");
		}
	}
}

void player_move(char board[ROW][COL], int row, int col)
{
	int x = 0; 
	int	y = 0;
	while (1)
	{
		printf("请玩家输入坐标（例如：2 1）：>\n");
		scanf("%d %d", &x, &y);
		if (x > 0 && x <= row && y>0 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("该出无法输入，请重新输入坐标！\n");
			}
		}
		else
		{
			printf("请重新输入合法坐标！！\n");
		}
	}
}

void cp_move(char board[ROW][COL], int row, int col)
{
	int x, y = 0;
	printf("电脑走\n");
	while (1)
	{
		x = rand() % row;
		y = rand() % col;
		if (board[x][y] == ' ')
		{
			board[x][y] = '@';
			break;
		}
	}

}

int is_full(char board[ROW][COL], int row, int col)
{
	int i, j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
			{
				return 0;
			}
		}
	}
	return 1;
}

//多子棋
char is_win(char board[ROW][COL], int row, int col)
{
	int i, j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == board[i][j + 1] && board[i][j + 1] == board[i][j + 2] && board[i][j + 2] == board[i][j + 3] && board[i][j + 3] == board[i][j + 4] && board[i][j] != ' ')
			{
				return board[i][j];
			}
			if (board[j][i] == board[j + 1][i] && board[j + 1][i] == board[j + 2][i] && board[j + 2][i] == board[j + 3][i] && board[j + 3][i] == board[j + 4][i] && board[j][i] != ' ')
			{
				return board[j][i];
			}
			if (board[i][j] == board[i + 1][j + 1] && board[i + 1][j + 1] == board[i + 2][j + 2] && board[i + 2][j + 2] == board[i + 3][j + 3] && board[i + 3][j + 3] == board[i + 4][j + 4] && board[i][j] != ' ')
			{
				return board[i][j];
			}
			if (board[i + 4][j] == board[i + 3][j + 1] && board[i + 3][j + 1] == board[i + 2][j + 2] && board[i + 2][j + 2] == board[i + 1][j + 3] && board[i + 1][j + 3] == board[i][j + 4] && board[i + 4][j] != ' ')
			{
				return board[i + 4][j];
			}
			
		}
	}
	if (1 == is_full(board, ROW, COL))
	{
		return 'Q';
	}
	return 'C';
}

//三子棋
//char is_win(char board[ROW][COL], int row, int col)
//{
//	int i = 0;
//	for (i = 0; i < row; i++)
//	{
//		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ')
//		{
//			return board[i][0];
//		}
//	}
//	for (i = 0; i < col; i++)
//	{
//		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ')
//		{
//			return board[0][i];
//		}
//	}
//	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ')
//	{
//		return board[0][0];
//	}
//	if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[2][0] != ' ')
//	{
//		return board[2][0];
//	}
//	if (1 == is_full(board, ROW, COL))
//	{
//		return 'Q';
//	}
//	return 'C';
//}

void game()
{
	char ret;
	char board[ROW][COL] = { 0 };
	InitBoard(board, ROW, COL);//初始化数组
	DisplayBoard(board, ROW, COL);//打印棋盘
	while (1)
	{
		//player time
		player_move(board, ROW, COL);
		DisplayBoard(board, ROW, COL);
		ret = is_win(board, ROW, COL);
		if (ret != 'C')
		{
			break;
		}
		//cp time
		cp_move(board, ROW, COL);
		DisplayBoard(board, ROW, COL);
		ret = is_win(board, ROW, COL);
		if (ret != 'C')
		{
			break;
		}
	}
	if (ret == '*')
	{
		printf("玩家赢！！\nCONGRATULATION!!\n");
	}
	else if (ret == '@')
	{
		printf("电脑赢！？\n废物，电脑都打不过！！\n");
	}
	else
	{
		printf("平局\n");
	}
}
